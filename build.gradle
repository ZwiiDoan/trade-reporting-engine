plugins {
    id "java"
    id "org.springframework.boot" version "${springbootVersion}"
    id "io.spring.dependency-management" version "${springDependencyVersion}"
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spotbugs' version "${spotbugsVersion}"
}

group = "per.duyd.interview"
version = "0.0.1-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.projectlombok:lombok"
    runtimeOnly 'com.h2database:h2'

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:${jakartaPersistenceVersion}"


    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.flywaydb:flyway-core"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiUiVersion}"
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"

    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findSecBugsVersion}"
}

tasks.named("test") {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.12.3'
}

jacoco {
    toolVersion = "0.8.9"
}

spotbugs {
    toolVersion = '4.7.3'
}

build {
    finalizedBy(jacocoTestReport)
}

def excludeCoverage = [
        "per/duyd/**/dto/**",
        "per/duyd/**/entity/**",
        "per/duyd/**/exception/**",
        "per/duyd/**/mapper/**",
        "per/duyd/**/Application**"
]

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludeCoverage)
        }))
    }
    finalizedBy(jacocoTestCoverageVerification)
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludeCoverage)
        }))
    }

    violationRules {
        rule {
            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 1
            }
        }
        rule {
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 1
            }
        }
    }
}

spotbugs {
    excludeFilter = file("$projectDir/config/spotbugs/excludeFilter.xml")
    spotbugsTest {
        enabled = false
    }
    spotbugsMain {
        reports {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }
}